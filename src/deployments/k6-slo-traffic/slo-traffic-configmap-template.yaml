apiVersion: v1
kind: ConfigMap
metadata:
  name: slo-traffic
data:
  load.js: |
    import http from 'k6/http';
    import {sleep} from 'k6';
    import {randomIntBetween} from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';

    export const options = {
      insecureSkipTLSVerify: true,
      discardResponseBodies: true,
      scenarios: {
        success: {
          executor: 'constant-vus',
          exec: 'success',
          vus: 5,
          duration: '5m',
        },
        failure: {
          executor: 'constant-vus',
          exec: 'error',
          vus: 1,
          duration: '5m',
        },
        status: {
          executor: 'constant-vus',
          exec: 'status',
          vus: 5,
          duration: '5m',
        },
        differentPath: {
          executor: 'constant-vus',
          exec: 'differentPath',
          vus: 10,
          duration: '5m',
        },
        differentMethod: {
          executor: 'constant-vus',
          exec: 'differentMethod',
          vus: 10,
          duration: '5m',
        },
        breakingSlo: {
          executor: 'per-vu-iterations',
          exec: 'breakingSlo',
          vus: 5,
          iterations: 100,
          maxDuration: '5m',
        }
      }
    };

    function sendStatus(status) {
      http.get('replace_gateway_url/replace_listen_path/status/' + status);
      sleep(1);
    }

    export function success() {
      sendStatus(200);
      sleep(1);
    }

    export function breakingSlo() {
      sendStatus(502);
      sleep(1);
    }

    export function status() {
      switch (randomIntBetween(1, 20)) {
        case 1:
          sendStatus(500); break;
        case 2: case 3:
          sendStatus(404); break;
        default:
          sendStatus(200);
      }
      sleep(1);
    }

    export function error() {
      switch (randomIntBetween(1, 5)) {
        case 1:
          sendStatus(400); break;
        case 2:
          sendStatus(404); break;
        case 3:
          sendStatus(500); break;
        case 4:
          sendStatus(502); break;
        case 5:
          sendStatus(503); break;
      }
      sleep(randomIntBetween(1, 5)); // sleep between 1 and 5 seconds.
    }

    export function differentPath() {
      switch (randomIntBetween(1, 5)) {
        case 1:
          http.get('replace_gateway_url/replace_listen_path/cache'); break;
        case 2:
          http.get('replace_gateway_url/replace_listen_path/ip'); break;
        case 3:
          http.get('replace_gateway_url/replace_listen_path/headers'); break;
        case 4:
          http.get('replace_gateway_url/replace_listen_path/user-agent'); break;
        default:
          http.get('replace_gateway_url/replace_listen_path/image'); break;
      }

      if (randomIntBetween(1, 7) === 1) {
        sendStatus(500);
      }
      sleep(1);
    }

    export function differentMethod() {
      var payload;
      var params;

      payload = JSON.stringify({
        content: 'Hello Tyk',
      });

      params = {
        headers: {
          'Content-Type': 'application/json',
        }
      };

      switch (randomIntBetween(1, 5)) {
        case 1:
          http.post("replace_gateway_url/replace_listen_path/post", payload, params);
          break;
        case 2:
          http.patch("replace_gateway_url/replace_listen_path/patch", payload, params);
          break;
        case 3:
          http.del("replace_gateway_url/replace_listen_path/delete", payload, params);
          break;
        case 4:
          http.put("replace_gateway_url/replace_listen_path/put", payload, params);
          break;
        case 5:
          http.post("replace_gateway_url/replace_listen_path/response-headers", payload, params);
          break;
      }
      sleep(1);
    }
