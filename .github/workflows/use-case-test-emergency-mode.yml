name: Emergency Mode Test

on:
  workflow_dispatch:
    inputs:
      dashboard_version:
        required: true
        type: string
        description: "Tyk Dashboard Version"
        default: "v5.7"
      gateway_version:
        required: true
        type: string
        description: "Tyk Gateway Version"
        default: "v5.7"

jobs:
  emergency-mode:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Install helm
        uses: Azure/setup-helm@v4

      - name: Install newman
        run: |
          sudo apt update && \
          sudo apt install nodejs npm -y && \
          npm install -g newman

      - name: start Minikube
        uses: medyagh/setup-minikube@latest
        with:
          kubernetes-version: v1.23.13
          extra-config: 'kubelet.max-pods=100'
          addons: 'default-storageclass,storage-provisioner,ingress'
          start-args: '--force'

      - name: Copy .env file
        run: cp .env.example .env

      - name: Deploy tyk-control-plane
        run: |
          LICENSE="${{ secrets.DASH_LICENSE }}" \
          MDCB_LICENSE="${{ secrets.MDCB_LICENSE }}" \
          OPERATOR_LICENSE="${{ secrets.DASH_LICENSE }}" \
          DASHBOARD_VERSION=${{ inputs.dashboard_version }} \
          GATEWAY_VERSION=${{ inputs.gateway_version }} \
          ./up.sh --redis redis --namespace tyk --deployments operator-httpbin tyk-cp

      - name: Sleep 60 seconds
        run: sleep 60

      - name: Test tyk-control-plane
        run: newman run --folder gateway --env-var "deployment=tyk-cp" tyk-k8s-demo.postman_collection.json

      - name: Deploy tyk-data-plane
        run: |
          TYK_DATA_PLANE_CONNECTIONSTRING=mdcb-svc-tyk-cp-tyk-mdcb.tyk.svc:9091 \
          TYK_DATA_PLANE_ORGID=$(kubectl get secrets --namespace tyk tyk-operator-conf -o=jsonpath="{.data.TYK_ORG}" | base64 -d) \
          TYK_DATA_PLANE_AUTHTOKEN=$(kubectl get secrets --namespace tyk tyk-operator-conf -o=jsonpath="{.data.TYK_AUTH}" | base64 -d) \
          TYK_DATA_PLANE_USESSL=false \
          TYK_DATA_PLANE_PORT=8081 \
          GATEWAY_VERSION=${{ inputs.gateway_version }} \
          ./up.sh --redis redis --namespace tyk-dp tyk-dp

      - name: Sleep 60 seconds
        run: sleep 60

      - name: Test tyk-data-plane deployment
        run: newman run --folder gateway --env-var "gateway.port=8081" --env-var "deployment=data-plane" tyk-k8s-demo.postman_collection.json

      - name: Test httpbin API
        run: newman run --folder operator-httpbin --insecure --env-var "gateway.port=8081" -n 1 tyk-k8s-demo.postman_collection.json

      - name: Scale MDCB down
        run: kubectl scale deploy mdcb-tyk-cp-tyk-mdcb --replicas=0 --namespace tyk

      - name: Sleep 60 seconds
        run: sleep 60

      - name: Test httpbin API
        run: newman run --folder operator-httpbin --insecure --env-var "gateway.port=8081" -n 1 tyk-k8s-demo.postman_collection.json

      - name: Restart gateway and to check if emergency mode triggers on cold start
        run: kubectl rollout restart deployment gateway-tyk-dp-tyk-gateway --namespace tyk-dp

      - name: Sleep 60 seconds
        run: sleep 60

      - name: Check if tyk-data-plane deployment continues to fail while MDCB is down and RPC is not returning a pass
        run: |
          set +e
          newman run --folder gateway --env-var "gateway.port=8081" --env-var "deployment=data-plane" tyk-k8s-demo.postman_collection.json
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 0 ]; then
            echo "❌ RPC passed but we expected failure."
            exit 1
          else
            echo "✅ RPC failed as expected."
            exit 0
          fi

      - name: Test httpbin API
        run: newman run --folder operator-httpbin --insecure --env-var "gateway.port=8081" -n 1 tyk-k8s-demo.postman_collection.json

      - name: Scale MDCB back up
        run: kubectl scale deploy mdcb-tyk-cp-tyk-mdcb --replicas=1 --namespace tyk

      - name: Sleep 60 seconds
        run: sleep 60

      - name: Test tyk-data-plane deployment now that MDCB is back up
        run: newman run --folder gateway --env-var "gateway.port=8081" --env-var "deployment=data-plane" tyk-k8s-demo.postman_collection.json

      - name: Test httpbin API
        run: newman run --folder operator-httpbin --insecure --env-var "gateway.port=8081" -n 1 tyk-k8s-demo.postman_collection.json
